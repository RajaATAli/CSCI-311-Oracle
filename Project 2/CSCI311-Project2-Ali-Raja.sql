-- DDL for creating tables and relationships

-- Creating the category table
CREATE TABLE category (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL
);

-- Creating the publisher table
CREATE TABLE publisher (
    publisher_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    country VARCHAR2(50),
    phone_number VARCHAR2(20)
);

-- Creating the author table
CREATE TABLE author (
    author_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    biography CLOB
);

-- Creating the book table
CREATE TABLE book (
    isbn VARCHAR2(20) PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    price NUMBER(6, 2) NOT NULL,
    publication_date DATE NOT NULL,
    publisher_id NUMBER NOT NULL,
    FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id)
);

-- Creating the book category table (book_category -> many to many relationship bw book and category
CREATE TABLE book_category (
    book_category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_id NUMBER NOT NULL,
    isbn VARCHAR2(20) NOT NULL,
    FOREIGN KEY (category_id) REFERENCES category(category_id),
    FOREIGN KEY (isbn) REFERENCES book(isbn)
);


-- Creating book-autjor table -> many to many relationship bw book and author
CREATE TABLE book_author (
    book_author_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    isbn VARCHAR2(20) NOT NULL,
    author_id NUMBER NOT NULL,
    FOREIGN KEY (isbn) REFERENCES book(isbn),
    FOREIGN KEY (author_id) REFERENCES author(author_id)
);

-- Creating customer table
CREATE TABLE customer (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    middle_name VARCHAR2(50),
    last_name VARCHAR2(50) NOT NULL,
    email_address VARCHAR2(100),
    phone_number VARCHAR2(20)
);

-- Order Table
CREATE TABLE "order" (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    order_date DATE NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
);


-- order_item table
CREATE TABLE order_item (
    order_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    isbn VARCHAR2(20) NOT NULL,
    order_id NUMBER NOT NULL,
    quantity NUMBER(5) NOT NULL,
    FOREIGN KEY (isbn) REFERENCES book(isbn),
    FOREIGN KEY (order_id) REFERENCES "order"(order_id)
);

-- DML Part for inseting data and executing queries

-- Publishers
INSERT INTO publisher (name, country, phone_number) VALUES ('Chilton Books', 'United States', '(333) 444-5555');
INSERT INTO publisher (name, country, phone_number) VALUES ('MIT Press', NULL, '(222)-333-4444');

-- Categories
INSERT INTO category (name) VALUES ('Science Fiction');
INSERT INTO category (name) VALUES ('Computer Science and Technology');

-- Books
INSERT INTO book (isbn, title, price, publication_date, publisher_id)
VALUES (
    '978-0441172719',
    'Dune',
    9.99,
    TO_DATE('01-AUG-1965', 'DD-MON-YYYY'),
    (SELECT publisher_id FROM publisher WHERE name = 'Chilton Books')
);

INSERT INTO book (isbn, title, price, publication_date, publisher_id)
VALUES (
    '978-0262033848',
    'Introduction to Algorithms',
    98.99,
    TO_DATE('17-JAN-1989', 'DD-MON-YYYY'),
    (SELECT publisher_id FROM publisher WHERE name = 'MIT Press')
);


-- authors
INSERT INTO author (first_name, last_name, biography) VALUES ('Frank', 'Herbert', 'Author of the Dune series');

INSERT INTO author (first_name, last_name, biography) VALUES ('Thomas', 'Cormen', 'Co-author of Introduction to Algorithms');

INSERT INTO author (first_name, last_name, biography) VALUES ('Charles', 'Leiserson', 'Co-author of Introduction to Algorithms');

INSERT INTO author (first_name, last_name, biography) VALUES ('Ronald', 'Rivest', 'Co-author of Introduction to Algorithms');

INSERT INTO author (first_name, last_name, biography) VALUES ('Clifford', 'Stein', 'Co-author of Introduction to Algorithms');

INSERT INTO author (first_name, last_name, biography) VALUES ('Paul', 'Atreides', 'Fictional character in the Dune universe');

-- book-author relationships
-- Dune by Frank Herbert
INSERT INTO book_author (isbn, author_id)
VALUES (
    '978-0441172719',
    (SELECT author_id FROM author WHERE first_name = 'Frank' AND last_name = 'Herbert')
);

-- Introduction to Algorithms by multiple authors
INSERT INTO book_author (isbn, author_id)
VALUES (
    '978-0262033848',
    (SELECT author_id FROM author WHERE first_name = 'Thomas' AND last_name = 'Cormen')
);

INSERT INTO book_author (isbn, author_id)
VALUES (
    '978-0262033848',
    (SELECT author_id FROM author WHERE first_name = 'Charles' AND last_name = 'Leiserson')
);

INSERT INTO book_author (isbn, author_id)
VALUES (
    '978-0262033848',
    (SELECT author_id FROM author WHERE first_name = 'Ronald' AND last_name = 'Rivest')
);

INSERT INTO book_author (isbn, author_id)
VALUES (
    '978-0262033848',
    (SELECT author_id FROM author WHERE first_name = 'Clifford' AND last_name = 'Stein')
);

INSERT INTO book_author (isbn, author_id)
VALUES (
    '978-0262033848',
    (SELECT author_id FROM author WHERE first_name = 'Paul' AND last_name = 'Atreides')
);

--  book-category relationships
-- Dune under Sci fi
INSERT INTO book_category (category_id, isbn)
VALUES (
    (SELECT category_id FROM category WHERE name = 'Science Fiction'),
    '978-0441172719'
);

-- Introduction to Algorithms under CS and Technology
INSERT INTO book_category (category_id, isbn)
VALUES (
    (SELECT category_id FROM category WHERE name = 'Computer Science and Technology'),
    '978-0262033848'
);

-- Update the price of "Introduction to Algorithms"
UPDATE book
SET price = 69.98
WHERE isbn = '978-0262033848';

-- What would happen if "Introduction to Algorithms" is deleted

/*
If you try to delete "Introduction to Algorithms", it will fail if there are any foreign key relationships in the book_author, 
book_category, or order_item tables that reference this book. Oracle will raise an error that a child record exists
You would need to remove all dependent rows first, or use ON DELETE CASCADE if designed for cascading deletes.
*/

-- Delete Paul Atreides as an author of "Introduction to Algorithms"
DELETE FROM book_author
WHERE author_id = (
    SELECT author_id FROM author WHERE first_name = 'Paul' AND last_name = 'Atreides'
);

-- Then, delete from the author table
DELETE FROM author
WHERE first_name = 'Paul' AND last_name = 'Atreides';
